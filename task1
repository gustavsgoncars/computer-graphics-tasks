{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "177a3426",
   "metadata": {},
   "source": [
    "## <center> RĪGAS TEHNISKĀ UNIVERSITĀTE\n",
    "\n",
    "### <center>DATORZINĀTNES UN INFORMĀCIJAS TEHNOLOĢIJAS FAKULTĀTE\n",
    "\n",
    "\n",
    "### <center>Datorgrafikas un attēlu apstrādes pamati\n",
    "<br> <hr>\n",
    "#### Praktiskā darba Nr. 1\n",
    "#### Vārds, Uzvārds: Gustavs Gončars\n",
    "#### Studenta apliecības nummurs: 231RDB029\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bf39cd8",
   "metadata": {},
   "source": [
    "## DARBA UZDEVUMS\n",
    "Balstoties uz praktiskās nodarbības laikā aplūkoto Brezenhema algoritma realizāciju, izveidot no vairākām taisnēm savus pēdējos 3 studenta apliecības numura skaitļus (piemēram, ja Jūsu studentu apliecības numurs ir 200RDB153, tad Jums ir jāizveido skaitļi 153)\n",
    "\n",
    "ORTUS vidē OBLIGĀTI nepieciešams iesniegt: Jupyter Notebook failu (\"*.ipynb\" formātā) ar individuālā uzdevuma izpildi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "747350e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "                                   #### Importē nepieciešamās bibliotēkas ###\n",
    "import numpy as np                 #masīvu izveide un informācijas apstrāde\n",
    "import matplotlib.pyplot as plt    #lai izvadītu/attēlotu attēla matricu un līnijas\n",
    "\n",
    "\n",
    "                        #### Izveido tukšu attēla matricu, uz kuras tālāk zīmēt līnijas ####\n",
    "#Matrica sākas ar augstuma vērtību, kas atbilstoši ir y, sekojot tam ar platuma vērtību kas ir x\n",
    "#Ja vēlas paplašināt zīmēšanas reģionu - samaina augstumu(height) un platumu(width), kas šajā piemērā ir 600,600\n",
    "img=np.ones((600,600,3)) \n",
    "\n",
    "                            #### Līnijas zīmēšanas algoritma definēšana ####\n",
    "#Tiek definēta funkcija 'DrawLine', ar kuras palīdzību tiek realizēts līnijas aprēķināšanas algoritms\n",
    "#x1,y1 - sākuma koordināte\n",
    "#x2,y2 - beigu koordināte\n",
    "def DrawLine(x1,y1,x2,y2):\n",
    "    #Ja aprēķina rezultāts ir negatīva vērtība, tad tā tiek pārveidota par pozitīvu\n",
    "    dx = abs(x2-x1) #dx - delta x, jeb starpība starp pēdējo x vērtību un sākuma x vērtību\n",
    "    dy = abs(y2-y1) #dy - delta y, jeb starpība starp pēdējo y vērtību un sākuma y vērtību  \n",
    "\n",
    "    #Ja sākuma x vērtība(x1) ir mazāka par beigu x vērtību(x2), tad x sākuma vērtība ir 1\n",
    "    if x1<x2:\n",
    "        xs=1 \n",
    "    #citādāk x sākuma vērtība ir -1\n",
    "    else:\n",
    "        xs=-1   \n",
    "        \n",
    "    #Ja sākuma y vērtība(y1) ir mazāka par beigu y vērtību(y2), tad y sākuma vērtība ir 1\n",
    "    if y1<y2:\n",
    "        ys=1\n",
    "    #citādāk y sākuma vērtība ir -1\n",
    "    else:\n",
    "        ys=-1\n",
    "     \n",
    "    \n",
    "    #pārdefinē x1 un y1 par mainīgajiem x un y, lai tālāk to izmantotu matemātisko aprēķinu ciklā\n",
    "    x=x1\n",
    "    y=y1  \n",
    "    \n",
    "    #tiek aprēķināts risinošais parametrs p, pēc kura tiek noteiktas nākošā pikseļa koordinātes\n",
    "    p=2*dy-dx   \n",
    "    \n",
    "                            #### Horizontālas līnijas aprēķins ####\n",
    "\n",
    "    #Ja delta x ir lielāks par delta y, tad kamēr x ir mazāks par definēto beigu x koordināti\n",
    "    if dx>dy:\n",
    "        while x!=x2:\n",
    "            #tad mainīgais x ir tekošā x vērtība + x sākuma vērtība\n",
    "            x=x+xs\n",
    "            #ja risinošais parametrs ir lielāks par 0\n",
    "            if p > 0:\n",
    "                #tad y vērtība pielīdzināma tekošajai y vērtībai + y sākuma vērtībai\n",
    "                y=y+ys\n",
    "                #parametra vērtība tiek definēta kā tekošā parametra vērtība +2 * delta y - 2* delta x\n",
    "                p=p+2*dy-2*dx\n",
    "            #citādāk parametra vērtība tiek definēta kā tekošā parametra vērtība + 2* delta y\n",
    "            else:\n",
    "                p=p+2*dy  \n",
    "\n",
    "            #tiek attēlota taisne, 0 = melna krāsa\n",
    "            img[y,x]= 0\n",
    "    else:\n",
    "        while y!=y2:\n",
    "            #tad mainīgais x ir tekošā x vērtība + x sākuma vērtība\n",
    "            y=y+ys\n",
    "            #ja risinošais parametrs ir lielāks par 0\n",
    "            if p > 0:\n",
    "                #tad y vērtība pielīdzināma tekošajai y vērtībai + y sākuma vērtībai\n",
    "                x=x+xs\n",
    "                #parametra vērtība tiek definēta kā tekošā parametra vērtība +2 * delta y - 2* delta x\n",
    "                p=p+2*dx-2*dy\n",
    "            #citādāk parametra vērtība tiek definēta kā tekošā parametra vērtība + 2* delta y\n",
    "            else:\n",
    "                p=p+2*dx \n",
    "\n",
    "            #tiek attēlota taisne, 0 = melna krāsa\n",
    "            img[y,x]=0\n",
    "    #ar 'return' atgriežas uz procesa sākumu, atkarto kamēr līnija nonāk līdz beigu koordinātēm\n",
    "    return\n",
    "                                      \n",
    "                                                #### Izvade ####\n",
    "#Ja vēlas līniju attēlot jaunā logā, ja vēlas atslēgt - jārestartē kernel ar izvadēm\n",
    "#%matplotlib qt\n",
    "\n",
    "#Zīmēt līniju (x1, y1, x2, y2)\n",
    "#        sākuma   beigu\n",
    "DrawLine(50,400,200,400)    #horizontāla līnija\n",
    "DrawLine(50,200,200,200)\n",
    "DrawLine(50,200,50,400)\n",
    "DrawLine(200,200,200,400)\n",
    "\n",
    "DrawLine(250,400,400,400) #horizontāla līnija\n",
    "DrawLine(250,200,400,200)\n",
    "DrawLine(250,300,400,300)\n",
    "DrawLine(250,300,250,400)\n",
    "DrawLine(400,200,400,300)\n",
    "\n",
    "DrawLine(450,400,550,400)    #horizontāla līnija\n",
    "DrawLine(450,200,550,200)\n",
    "DrawLine(550,200,550,400)\n",
    "DrawLine(450,200,450,300)\n",
    "DrawLine(450,300,550,300)\n",
    "\n",
    "#Gan zīmēšanas paneļa, gan taisņu izvade\n",
    "plt.imshow(img)\n",
    "#Izvade Notebook\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "df1b0523",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
